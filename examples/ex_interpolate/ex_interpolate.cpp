#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include "interpolate.h"

/*****************************************************************************
*  ex_interpolate.cpp                                                        *
*                                                                            *
*  1.  Interpolacja Lagrange’a – pełny zestaw 61 węzłów:                     *
*        xi, fi.                                                             *
*      * wyliczamy P_L(-9.667) i porównujemy z wartością tablicową.          *
*                                                                            *
*  2.  Wielomian stopnia 9                                                   *
*        P(x) = Σ_{i=0..9} a_i x^i                                           *   
*        ilość stopni wybiera się liczbą współczynników a.size() - 1.        *
*      * liczymy P(x) w 99 punktach tablicy xi                               *
*        –  postać naturalna  (pow)                                          *
*        –  schemat Hornera (poly_horner)                                    *
*      * raportujemy różnicę w jednym punkcie i globalny RMS.                *   
*   3.  Wielomian Newtona z różnicami dzielonymi dla 99 węzłów:              *
*       - xiC, fiC. Wybór co n węzłów samodzielnie                           *
*                                                                            *
*  Jak korzystać z funkcji z modułu `interpolate`:                           *
*    * lagrange(xi, fi, x)       – interpolacja w punkcie x                  *
*    * poly_horner(a, x)         – szybka wartość wielomianu                 *
*****************************************************************************/


using namespace numlab;

/* ───────── Sekcja A – Lagrange (61 punktów) ───────── */
const Vector xiA = {
   -10.000,-9.667,-9.333,-9.000,-8.667,-8.333,-8.000,-7.667,-7.333,-7.000,
    -6.667,-6.333,-6.000,-5.667,-5.333,-5.000,-4.667,-4.333,-4.000,-3.667,
    -3.333,-3.000,-2.667,-2.333,-2.000,-1.667,-1.333,-1.000,-0.667,-0.333,
     0.000, 0.333, 0.667, 1.000, 1.333, 1.667, 2.000, 2.333, 2.667, 3.000,
     3.333, 3.667, 4.000, 4.333, 4.667, 5.000, 5.333, 5.667, 6.000, 6.333,
     6.667, 7.000, 7.333, 7.667, 8.000, 8.333, 8.667, 9.000, 9.333, 9.667,10.000 };

const Vector fiA = {
   -432.000,-343.519,-261.926,-187.000,-118.519, -56.259,   0.000,  50.481,
     95.407, 135.000, 169.481, 199.074, 224.000, 244.481, 260.741, 273.000,
    281.481, 286.407, 288.000, 286.481, 282.074, 275.000, 265.481, 253.741,
    240.000, 224.481, 207.407, 189.000, 169.481, 149.074, 128.000, 106.481,
     84.741,  63.000,  41.481,  20.407,  -0.000, -19.519, -37.926, -55.000,
    -70.519, -84.259, -96.000,-105.519,-112.593,-117.000,-118.519,-116.926,
   -112.000,-103.519, -91.259, -75.000, -54.519, -29.593,   0.000,  34.481,
     74.074, 119.000, 169.481, 225.741, 288.000 };

/* ───────── Sekcja B – wielomian 9-go stopnia ──────── */
const Vector coeffB = { -9.5,-6.4,7.8,8.2,-0.7,-7.8,6.8,-7.2,-9.2,-5.4 };

/* ───────── Sekcja C – 99-punktowa tablica do Newtona ─ */
const Vector xiC = {
   -11.0000,-10.6140,-10.2404,-9.8788,-9.5289,-9.1902,-8.8624,-8.5452,-8.2381,
    -7.9409,-7.6533,-7.3750,-7.1056,-6.8448,-6.5925,-6.3483,-6.1119,-5.8831,
    -5.6617,-5.4474,-5.2400,-5.0393,-4.8450,-4.6570,-4.4750,-4.2989,-4.1285,
    -3.9635,-3.8038,-3.6493,-3.4998,-3.3550,-3.2149,-3.0793,-2.9481,-2.8211,
    -2.6982,-2.5792,-2.4641,-2.3527,-2.2448,-2.1404,-2.0394,-1.9417,-1.8470,
    -1.7554,-1.6668,-1.5810,-1.4980,-1.4176,-1.3399,-1.2646,-1.1918,-1.1213,
    -1.0530,-0.9870,-0.9231,-0.8612,-0.8013,-0.7434,-0.6873,-0.6330,-0.5805,
    -0.5297,-0.4805,-0.4328,-0.3867,-0.3421,-0.2990,-0.2572,-0.2167,-0.1776,
    -0.1397,-0.1031,-0.0676,-0.0332, 0.0000, 0.0474, 0.0971, 0.1491, 0.2036,
     0.2607, 0.3205, 0.3831, 0.4487, 0.5174, 0.5893, 0.6647, 0.7436, 0.8263,
     0.9129, 1.0036, 1.0987, 1.1982, 1.3024, 1.4116, 1.5260, 1.6458, 1.7712,
     1.9026, 2.0403, 2.1845, 2.3355, 2.4936, 2.6593, 2.8328, 3.0146, 3.2050,
     3.4044, 3.6132, 3.8320, 4.0611, 4.3011, 4.5525, 4.8158, 5.0916, 5.3805,
     5.6831, 6.0000 };

const Vector fiC = {
   184964.4720,165147.8806,147362.9864,131407.8501,117100.1895,104275.4924,
    92785.3085, 82495.7044, 73285.8657, 65046.8323, 57680.3543, 51097.8571,
    45219.5058, 39973.3582, 35294.6000, 31124.8518, 27411.5443, 24107.3516,
    21169.6803, 18560.2071, 16244.4609, 14191.4454, 12373.2978, 10764.9808,
     9344.0040,  8090.1722,  6985.3588,  6013.3004,  5159.4114,  4410.6175,
     3755.2040,  3182.6806,  2683.6576,  2249.7358,  1873.4060,  1547.9596,
     1267.4063,  1026.4020,   820.1818,   644.5011,   495.5818,   370.0643,
      264.9636,   177.6307,   105.7172,    47.1434,     0.0704,   -37.1260,
      -65.8778,   -87.4460,  -102.9387,  -113.3279,  -119.4646,  -122.0919,
     -121.8571,  -119.3226,  -114.9753,  -109.2356,  -102.4646,   -94.9713,
      -87.0188,   -78.8298,   -70.5910,   -62.4585,   -54.5604,   -47.0016,
      -39.8657,   -33.2186,   -27.1103,   -21.5776,   -16.6455,   -12.3293,
       -8.6358,    -5.5648,    -3.1099,    -1.2600,     0.0000,     0.8234,
        0.3554,    -1.7223,    -5.7874,   -12.2862,   -21.7459,   -34.7877,
      -52.1418,   -74.6661,  -103.3662,  -139.4199,  -184.2047,  -239.3299,
     -306.6740,  -388.4270,  -487.1405,  -605.7846,  -747.8143,  -917.2452,
    -1118.7422, -1357.7206, -1640.4636, -1974.2574, -2367.5470, -2830.1163,
    -3373.2950, -4010.1975, -4755.9988, -5628.2511, -6647.2497, -7836.4541,
    -9222.9732,-10838.1240,-12718.0749,-14904.5873,-17445.8679,-20397.5516,
   -23823.8321,-27798.7637,-32407.7592,-37749.3142,-43936.9920 };

/* ───────────────────────────  MAIN  ───────────────────────────────────── */
int main()
{
    std::cout << std::fixed << std::setprecision(6);

    /* ========= A) Lagrange x = -9.667 =================================== */
    double Px = lagrange(xiA, fiA, -9.667);
    std::cout << "Lagrange (x=-9.667)   = " << Px << '\n';

    /* ========= B) Wielomian stopnia 9  Horner vs natural ================ */
    double xW = -0.9152;
    double p_nat = poly_eval(coeffB, xW);
    double p_hor = poly_horner(coeffB, xW);
    std::cout << "Wielo.9  natural=" << p_nat
        << "  Horner=" << p_hor
        << "  diff=" << std::fabs(p_nat - p_hor) << '\n';

    /* ========= C) Wielomian Newtona  dla 99 węzłów ====================== */
    Vector xi_node, fi_node; // wybór co 5-tego węzła z xiC, fiC
    for (std::size_t i = 0; i < xiC.size(); i += 5) {
        xi_node.push_back(xiC[i]);
        fi_node.push_back(fiC[i]);
    }

    Vector aN = newton_coeff(xiC, fiC);         // róznice dzielone
    double xC = -1.9417;
    double PN = newton_eval(aN, xiC, xC);
    std::cout << "Newton (x=-1.9417)      = " << PN << '\n';



    /* Dokumentacja (krótka w komentarzach):
       *  lagrange(xi,fi,x)  – pełna lub podpróbkowana tablica węzłów,
                               zwraca wartość wielomianu interpolacyjnego.
       *  poly_horner(a,x)   – preferowany (szybszy) sposób obliczania
                               wartości wielomianu zapisanego współczynnikami.
       *  poly_natural       – pokazane tylko w celach edukacyjnych; wolniejsze
                               i mniej dokładne przy wysokich potęgach.        
       *  newton_coeff i newton_eval - klasyczny wielomian Newtona z różnicami dzielonymi
     */
}
